{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormRedux","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","formSummaryError","Field","placeholder","name","component","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","src","photos","large","photoUser","mainPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddPostReduxForm","validate","required","MyPosts","React","memo","postsElements","posts","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.c61ebc05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3ZWo7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1bNwE\",\"contact\":\"ProfileInfo_contact__15gVc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__GKuwN\",\"posts\":\"MyPosts_posts__2iOrH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ZygDS\"};","import { useState, useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div onDoubleClick={activateEditMode}>\r\n          <b>Status</b>: <span>{props.status || \"---\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import { Field, reduxForm } from \"redux-form\";\r\nimport { Input } from \"../../../common/FormsContols/FormsControls\";\r\nimport { Textarea } from \"./../../../common/FormsContols/FormsControls\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport styles from \"../../../common/FormsContols/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <button>save</button>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b> Full name</b>:\r\n        <Field placeholder=\"Full name\" name=\"fullName\" component={Input} />\r\n      </div>\r\n      <div>\r\n        <b> Looking for a job</b>:\r\n        <Field name=\"lookingForAJob\" component={Input} type=\"checkbox\" />\r\n      </div>\r\n      <div>\r\n        <b> My professional skills</b>:\r\n        <Field\r\n          placeholder=\"My professional skills\"\r\n          name=\"lookingForAJobDescription\"\r\n          component={Textarea}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b> About me</b>:\r\n        <Field placeholder=\"About me\" name=\"aboutMe\" component={Textarea} />\r\n      </div>\r\n      <div>\r\n        <b> Contacts</b>:\r\n        {Object.keys(profile.contacts).map((key) => (\r\n          <div className={s.contact}>\r\n            <b>{key}</b>:\r\n            <Field\r\n              placeholder={key}\r\n              name={\"contacts.\" + key}\r\n              component={Input}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormRedux = reduxForm({ form: \"edit-profile\" })(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormRedux;\r\n","import s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"./../../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport photoUser from \"../../../assets/images/user.png\";\r\nimport { useState } from \"react\";\r\nimport ProfileDataFormRedux from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <img src={profile.photos.large || photoUser} className={s.mainPhoto} />\r\n      {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n      {editMode ? (\r\n        <ProfileDataFormRedux\r\n          initialValues={profile}\r\n          onSubmit={onSubmit}\r\n          profile={profile}\r\n        />\r\n      ) : (\r\n        <ProfileData\r\n          profile={profile}\r\n          isOwner={isOwner}\r\n          goToEditMode={() => {\r\n            setEditMode(true);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div>\r\n      {isOwner && <button onClick={goToEditMode}>edit</button>}\r\n      <div>\r\n        <b> Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b> Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b> My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b> About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b> Contacts</b>:\r\n        {Object.keys(profile.contacts).map((key) => (\r\n          <Contact\r\n            key={key}\r\n            contactTitle={key}\r\n            contactValue={profile.contacts[key]}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"./../../../common/FormsContols/FormsControls\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"./../../../utils/validators/validators\";\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newPostText\"\r\n          placeholder=\"Enter for message\"\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddPostReduxForm = reduxForm({ form: \"profileAddPostForm\" })(AddPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((p) => (\r\n    <Post message={p.message} likesCount={p.likesCount} key={p.id} />\r\n  ));\r\n\r\n  let addNewPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <AddPostReduxForm onSubmit={addNewPost} />\r\n      </div>\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import MyPosts from \"./MyPosts\";\r\nimport { addPostActionCreator } from \"./../../../redux/profile-reducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost(newPostText) {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport s from \"./Profile.module.css\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from \"./../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport { withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        return this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId)\r\n      this.refreshProfile();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile\r\n          {...this.props}\r\n          isOwner={!this.props.match.params.userId}\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateStatus}\r\n          savePhoto={this.props.savePhoto}\r\n          saveProfile={this.props.saveProfile}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}